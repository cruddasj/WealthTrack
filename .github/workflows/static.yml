# Simple workflow for deploying static content to GitHub Pages
name: Deploy static content to Pages

on:
  # Runs on pushes targeting the default branch
  push:
    branches: ["main"]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# Sets permissions of the GITHUB_TOKEN to allow deployment to GitHub Pages
permissions:
  contents: write
  pages: write
  id-token: write

# Allow only one concurrent deployment, skipping runs queued between the run in-progress and latest queued.
# However, do NOT cancel in-progress runs as we want to allow these production deployments to complete.
concurrency:
  group: "pages"
  cancel-in-progress: false

jobs:
  # Single deploy job since we're just deploying
  deploy:
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Determine release version
        id: version
        run: |
          git fetch --tags --force
          latest=$(git tag -l 'v*' --sort=-version:refname | head -n 1)
          if [ -z "$latest" ]; then
            next="0.1.0"
          else
            version="${latest#v}"
            IFS='.' read -r major minor patch <<<"$version"
            major=${major:-0}
            minor=${minor:-1}
            patch=${patch:-0}
            patch=$((patch + 1))
            next="$major.$minor.$patch"
          fi
          echo "version=$next" >> "$GITHUB_OUTPUT"
          echo "tag=v$next" >> "$GITHUB_OUTPUT"
      - name: Update version file
        run: |
          cat <<'JSON' > assets/version.json
          {
            "version": "${{ steps.version.outputs.version }}"
          }
          JSON
      - name: Stamp service worker cache version
        run: |
          perl -0pi -e 's/__APP_VERSION__/${{ steps.version.outputs.version }}/g' service-worker.js
      - name: Create tag and release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.version.outputs.tag }}
          release_name: ${{ steps.version.outputs.tag }}
          body: "Automated release for ${{ steps.version.outputs.version }}"
      - name: Prune old releases
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const maxReleases = 5;
            const { owner, repo } = context.repo;
            const releases = await github.paginate(
              github.rest.repos.listReleases,
              { owner, repo, per_page: 100 }
            );
            const toDelete = releases
              .filter((release) => !release.draft && !release.prerelease)
              .slice(maxReleases);
            for (const release of toDelete) {
              await github.rest.repos.deleteRelease({
                owner,
                repo,
                release_id: release.id,
              });
              if (release.tag_name) {
                try {
                  await github.rest.git.deleteRef({
                    owner,
                    repo,
                    ref: `tags/${release.tag_name}`,
                  });
                } catch (error) {
                  if (error.status !== 404) throw error;
                }
              }
            }
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
      - name: Install dependencies
        run: npm ci
      - name: Build icons
        run: npm run build:icons
      - name: Build CSS
        run: npm run build:css
      - name: Setup Pages
        uses: actions/configure-pages@v5
      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          # Upload entire repository
          path: '.'
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
